/*
Aura Frame API - Unofficial

Reverse Engineered API for Aura Frames

API version: 0.0.1
Contact: dave@mudsite.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auraframes

import (
	"encoding/json"
)

// Frames struct for Frames
type Frames struct {
	Frames []Frame `json:"frames,omitempty"`
}

// NewFrames instantiates a new Frames object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFrames() *Frames {
	this := Frames{}
	return &this
}

// NewFramesWithDefaults instantiates a new Frames object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFramesWithDefaults() *Frames {
	this := Frames{}
	return &this
}

// GetFrames returns the Frames field value if set, zero value otherwise.
func (o *Frames) GetFrames() []Frame {
	if o == nil || o.Frames == nil {
		var ret []Frame
		return ret
	}
	return o.Frames
}

// GetFramesOk returns a tuple with the Frames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Frames) GetFramesOk() ([]Frame, bool) {
	if o == nil || o.Frames == nil {
		return nil, false
	}
	return o.Frames, true
}

// HasFrames returns a boolean if a field has been set.
func (o *Frames) HasFrames() bool {
	if o != nil && o.Frames != nil {
		return true
	}

	return false
}

// SetFrames gets a reference to the given []Frame and assigns it to the Frames field.
func (o *Frames) SetFrames(v []Frame) {
	o.Frames = v
}

func (o Frames) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Frames != nil {
		toSerialize["frames"] = o.Frames
	}
	return json.Marshal(toSerialize)
}

type NullableFrames struct {
	value *Frames
	isSet bool
}

func (v NullableFrames) Get() *Frames {
	return v.value
}

func (v *NullableFrames) Set(val *Frames) {
	v.value = val
	v.isSet = true
}

func (v NullableFrames) IsSet() bool {
	return v.isSet
}

func (v *NullableFrames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrames(val *Frames) *NullableFrames {
	return &NullableFrames{value: val, isSet: true}
}

func (v NullableFrames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


